{"version":3,"sources":["../../src/use-radio.ts"],"names":["useFormControlContext","useBoolean","useControllableProp","useId","mergeRefs","ariaAttr","callAllHandlers","dataAttr","scheduleMicrotask","warn","visuallyHiddenStyle","useCallback","useRef","useState","useRadioGroupContext","useRadio","props","defaultIsChecked","defaultChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isDisabledProp","isReadOnly","isReadOnlyProp","isRequired","isRequiredProp","onChange","isInvalid","isInvalidProp","name","value","id","idProp","dataRadioGroup","htmlProps","uuid","undefined","formControl","group","isWithinRadioGroup","isWithinFormControl","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","isCheckedState","setChecked","Boolean","isControlled","condition","message","handleChange","event","preventDefault","target","checked","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onFocus","onBlur","getInputProps","forwardedRef","focus","trulyDisabled","type","disabled","readOnly","required","style","getLabelProps","stop","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  scheduleMicrotask,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    ...htmlProps\n  } = props\n\n  const uuid = useId(undefined, \"radio\")\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      /**\n       * This is a workaround for React Concurrent Mode issue.\n       * @see Issue https://github.com/facebook/react/issues/18591.\n       *\n       * Remove once it's fixed.\n       */\n      const focus = () => {\n        scheduleMicrotask(() => {\n          setFocused.on()\n        })\n      }\n\n      const trulyDisabled = isDisabled && !isFocusable\n\n      return {\n        ...props,\n        id,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(onFocus, props.onFocus, focus),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        required: isRequired,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-required\": ariaAttr(isRequired),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      isDisabled,\n      isFocusable,\n      id,\n      name,\n      value,\n      handleChange,\n      onBlur,\n      setFocused,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n      isReadOnly,\n      isRequired,\n      isInvalid,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"],"file":"use-radio.js"}