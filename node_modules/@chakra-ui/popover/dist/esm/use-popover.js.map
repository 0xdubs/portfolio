{"version":3,"sources":["../../src/use-popover.ts"],"names":["useDisclosure","useFocusOnHide","useFocusOnPointerDown","useFocusOnShow","useIds","popperCSSVars","usePopper","mergeRefs","callAllHandlers","contains","determineLazyBehavior","getRelatedTarget","px","useCallback","useEffect","useRef","useState","TRIGGER","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","trigger","openDelay","closeDelay","isLazy","lazyBehavior","popperProps","isOpen","onClose","onOpen","onToggle","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","hasHeader","setHasHeader","hasBody","setHasBody","triggerId","popoverId","headerId","bodyId","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","enabled","ref","focusRef","visible","shouldFocus","shouldRenderChildren","hasBeenSelected","isSelected","getPopoverProps","_ref","popoverProps","style","transformOrigin","varRef","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","targetIsPopover","targetIsTrigger","isValidBlur","undefined","onMouseEnter","onMouseLeave","setTimeout","getPopoverPositionerProps","forwardedRef","var","visibility","openTimeout","closeTimeout","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","getHeaderProps","node","getBodyProps"],"mappings":"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","sourcesContent":["import {\n  useDisclosure,\n  useFocusOnHide,\n  useFocusOnPointerDown,\n  useFocusOnShow,\n  useIds,\n} from \"@chakra-ui/hooks\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { HTMLProps, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  contains,\n  determineLazyBehavior,\n  FocusableElement,\n  getRelatedTarget,\n  LazyBehavior,\n  px,\n} from \"@chakra-ui/utils\"\nimport { RefObject, useCallback, useEffect, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends UsePopperProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen,\n  })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? px(arrowSize)\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [arrowShadowColor, arrowSize, isOpen, getPopperProps],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, referenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      referenceRef,\n      onToggle,\n      onOpen,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onClose,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"],"file":"use-popover.js"}