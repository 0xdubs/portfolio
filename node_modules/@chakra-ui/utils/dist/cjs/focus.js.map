{"version":3,"sources":["../../src/focus.ts"],"names":["focus","element","options","isActive","isActiveElement","nextTick","preventScroll","selectTextIfInput","triggerFocus","condition","message","supportsPreventScroll","scrollableElements","getScrollableElements","restoreScrollPosition","select","requestAnimationFrame","supportsPreventScrollCached","div","document","createElement","e","doc","parent","parentNode","rootScrollingElement","scrollingElement","documentElement","HTMLElement","offsetHeight","scrollHeight","offsetWidth","scrollWidth","push","scrollTop","scrollLeft"],"mappings":"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","sourcesContent":["// Original licensing for the following methods can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/calvellido/focus-options-polyfill\n// See https://github.com/adobe/react-spectrum\n\nimport { getOwnerDocument } from \"./dom\"\nimport { warn } from \"./function\"\nimport { FocusableElement, isActiveElement, isInputElement } from \"./tabbable\"\n\nexport interface ExtendedFocusOptions extends FocusOptions {\n  /**\n   * Function that determines if the element is the active element\n   */\n  isActive?: typeof isActiveElement\n  /**\n   * If true, the element will be focused in the next tick\n   */\n  nextTick?: boolean\n  /**\n   * If true and element is an input element, the input's text will be selected\n   */\n  selectTextIfInput?: boolean\n}\n\nexport function focus(\n  element: FocusableElement | null,\n  options: ExtendedFocusOptions = {},\n) {\n  const {\n    isActive = isActiveElement,\n    nextTick,\n    preventScroll = true,\n    selectTextIfInput = true,\n  } = options\n\n  if (!element || isActive(element)) return -1\n\n  function triggerFocus() {\n    if (!element) {\n      warn({\n        condition: true,\n        message:\n          \"[chakra-ui]: can't call focus() on `null` or `undefined` element\",\n      })\n      return\n    }\n    if (supportsPreventScroll()) {\n      element.focus({ preventScroll })\n    } else {\n      element.focus()\n      if (preventScroll) {\n        const scrollableElements = getScrollableElements(element as HTMLElement)\n        restoreScrollPosition(scrollableElements)\n      }\n    }\n\n    if (isInputElement(element) && selectTextIfInput) {\n      element.select()\n    }\n  }\n\n  if (nextTick) {\n    return requestAnimationFrame(triggerFocus)\n  }\n\n  triggerFocus()\n  return -1\n}\n\nlet supportsPreventScrollCached: boolean | null = null\nfunction supportsPreventScroll() {\n  if (supportsPreventScrollCached == null) {\n    supportsPreventScrollCached = false\n    try {\n      const div = document.createElement(\"div\")\n      div.focus({\n        get preventScroll() {\n          supportsPreventScrollCached = true\n          return true\n        },\n      })\n    } catch (e) {\n      // Ignore\n    }\n  }\n\n  return supportsPreventScrollCached\n}\n\ninterface ScrollableElement {\n  element: HTMLElement\n  scrollTop: number\n  scrollLeft: number\n}\n\nfunction getScrollableElements(element: HTMLElement): ScrollableElement[] {\n  const doc = getOwnerDocument(element)\n  let parent = element.parentNode\n  const scrollableElements: ScrollableElement[] = []\n  const rootScrollingElement = doc.scrollingElement || doc.documentElement\n\n  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {\n    if (\n      parent.offsetHeight < parent.scrollHeight ||\n      parent.offsetWidth < parent.scrollWidth\n    ) {\n      scrollableElements.push({\n        element: parent,\n        scrollTop: parent.scrollTop,\n        scrollLeft: parent.scrollLeft,\n      })\n    }\n    parent = parent.parentNode\n  }\n\n  if (rootScrollingElement instanceof HTMLElement) {\n    scrollableElements.push({\n      element: rootScrollingElement,\n      scrollTop: rootScrollingElement.scrollTop,\n      scrollLeft: rootScrollingElement.scrollLeft,\n    })\n  }\n\n  return scrollableElements\n}\n\nfunction restoreScrollPosition(scrollableElements: ScrollableElement[]) {\n  for (const { element, scrollTop, scrollLeft } of scrollableElements) {\n    element.scrollTop = scrollTop\n    element.scrollLeft = scrollLeft\n  }\n}\n"],"file":"focus.js"}