{"version":3,"sources":["../../src/button.tsx"],"names":["Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","_focus","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","React","useState","isButton","setIsButton","refCallback","useCallback","node","tagName","defaultType","undefined","__DEV__","displayName","ButtonIcon","_children","isValidElement","cloneElement","focusable","_className","ButtonSpinner","label","placement","spacing","__css","marginProp","spinnerStyles","fontSize","lineHeight"],"mappings":"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","sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-utils\"\nimport { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  const [isButton, setIsButton] = React.useState(!as)\n  const refCallback = React.useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const defaultType = isButton ? \"button\" : undefined\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={mergeRefs(ref, refCallback)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner label={loadingText} placement=\"start\">\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner label={loadingText} placement=\"end\">\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  placement?: \"start\" | \"end\"\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    placement,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? \"0.5rem\" : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\",\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"],"file":"button.js"}